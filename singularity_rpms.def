Bootstrap: docker
From: centos:7

%post

    # this container reproduces the instructions in
    # https://www.sylabs.io/guides/3.3/user-guide/installation.html
   
    # Assuming you have singularity installed and sudo/root permissions
    # you only need to define SINGULARITY_VERSION in this file and run
    # $> sudo singularity build /tmp/singularity_rpms.simg singularity_rpms.def
    # When the build finishes you will get the rpms in /tmp/rpmbuild

    # check the versions in https://github.com/sylabs/singularity/releases
    #export SINGULARITY_VERSION="v3.2.1"
    # get the latest singularity version
    SINGULARITY_VERSION=$(curl -s https://api.github.com/repos/sylabs/singularity/releases/latest | grep -oP '"tag_name": "\K(.*)(?=")' | cut -d "v" -f 2)

    # bring up to date and install deps
    yum update -y && \
    yum groupinstall -y 'Development Tools' && \
    yum install -y \
    openssl-devel \
    libuuid-devel \
    libseccomp-devel \
    wget \
    squashfs-tools

    # install golang
    export VERSION=1.12 OS=linux ARCH=amd64 && \
    wget https://dl.google.com/go/go$VERSION.$OS-$ARCH.tar.gz && \
    tar -C /usr/local -xzvf go$VERSION.$OS-$ARCH.tar.gz && \
    rm go$VERSION.$OS-$ARCH.tar.gz

    # set up your environment for Go
    echo 'export GOPATH=${HOME}/go' >> ~/.bashrc && \
    echo 'export PATH=/usr/local/go/bin:${PATH}:${GOPATH}/bin' >> ~/.bashrc && \
    source ~/.bashrc

    # build rpms
    wget https://github.com/sylabs/singularity/releases/download/v${SINGULARITY_VERSION}/singularity-${SINGULARITY_VERSION}.tar.gz 
    export build_log_name="singularity-${SINGULARITY_VERSION}.build.`date --iso-8601=minutes| sed 's/:/h/g'`.log"
    rpmbuild -tb --nodeps singularity-${SINGULARITY_VERSION}.tar.gz 2>&1 | tee $build_log_name
    rpm -ivh ~/rpmbuild/RPMS/x86_64/singularity-$SINGULARITY_VERSION-*.rpm && \
    rm -rf ~/rpmbuild singularity-$SINGULARITY_VERSION*.tar.gz
    rpm -qa --queryformat='%{name}.%{arch}\n' | sort|uniq |  grep -v ^gpg-pubkey  > installed-rpms.log

    # copy the created rpms to /tmp/rpmbuild in the host (outside the container)
    [ -d /tmp/rpmbuild ] || mkdir /tmp/rpmbuild
    rsync -av --progress /root/rpmbuild/RPMS /tmp/rpmbuild/
    rsync -av --progress /root/rpmbuild/SRPMS /tmp/rpmbuild/
    cp -a {installed-rpms.log,$build_log_name} /tmp/rpmbuild/
    echo 'RPMs and build logs are in /tmp/rpmbuild' 
